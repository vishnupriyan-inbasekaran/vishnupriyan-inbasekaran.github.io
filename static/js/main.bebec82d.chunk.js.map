{"version":3,"sources":["constants.js","services/AxiosService.js","components/widget-icon-area.js","components/chat-box.js","components/widget-convo-area.js","components/bot-widget.js","App.js","reportWebVitals.js","index.js"],"names":["FEEDBACK_VALUES","CONSTANTS","USER_CREDENTIALS","EMAIL","PASSWORD","DEFAULT_CONVO_ID","FEEDBACK_EMOJIS","imgFileName","altName","MSG_TYPES","TEXT","FEEDBACK","PLAIN_INPUT","API_DOMAIN","AxiosService","this","LOGIN_URL","GET_APP_DETAILS_URL","GET_CONVO_URL","GET_INIT_MESSAGE_URL","axios","interceptors","request","use","config","error","Promise","reject","response","res","x","token","userId","authToken","getAuthToken","reqHeaders","headers","data","post","getHeaders","url","get","convoId","channelId","replace","localStorage","getItem","GET_RECOMMENDED_TUTORS_URL","topicId","put","UPDATE_TOPIC_STATUS","WidgetIconArea","props","className","onClick","toggleWidgetOpenState","isWidgetOpen","dangerouslySetInnerHTML","__html","initConvoInfo","popupMessage","message","src","width","ChatBox","lastChatMsg","chatMessages","length","console","log","Fragment","ref","chatAreaRef","map","msg","i","buttons","sentByMe","sender","img","type","isFeedbackResponse","text","fields","btnName","bkey","sendServerMsg","feedback","fd","feedBackVal","id","alt","textInputRef","name","placeholder","rows","onKeyDown","e","submitTextarea","WidgetConvoArea","BotWidget","useState","setInitialConvoInfo","initMsgInfo","setInitMsgInfo","projectKey","setProjectKey","setChatMessages","pusherObj","setPusherObj","useRef","axiosServ","a","getAppDetails","appDetails","project","getConversationInfo","conversationInfoResponse","convoInfo","getInitMessageInfo","user","msgInfoResponse","fieldValue","channelName","subscriptionChannel","lastMsg","clientData","lastMessageTimeStamp","messageTimestamp","senderId","replaceLastMsg","plainInput","key","oldChatMessages","submitted","value","channel","trigger","msgs","pop","addMessages","setTimeout","current","scrollTop","scrollHeight","handleChatAreaChange","useEffect","pusher","window","Pusher","cluster","authEndpoint","AUTH_ENDPOINT_BASE_URL","auth","Authorization","initPusher","subscribe","bind","messages","status","bindPusherEvents","getInitConversationInfo","preventDefault","App","userToken","setUserToken","loginUser","email","password","then","setItem","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAMMA,EAAkB,CACpB,EAAG,gBACH,EAAG,MACH,EAAG,UACH,EAAG,OACH,EAAG,aAyBMC,EAAY,CACrBC,iBAAkB,CACdC,MAAO,8BACPC,SAAU,kBAEdC,iBAAkB,uBAClBC,gBA5BoB,CACxB,CACIC,YAAa,yBACbC,QAASR,EAAgB,IAE7B,CACIO,YAAa,eACbC,QAASR,EAAgB,IAE7B,CACIO,YAAa,kBACbC,QAASR,EAAgB,IAC1B,CACCO,YAAa,gBACbC,QAASR,EAAgB,IAE7B,CACIO,YAAa,qBACbC,QAASR,EAAgB,KAWzBS,UA3Cc,CACdC,KAAM,OACNC,SAAU,WACVC,YAAa,cAyCbZ,mB,gCC1CEa,EAAa,sCAEbC,E,WACJ,aAAe,oBACbC,KAAKC,UAAYH,EAAa,aAC9BE,KAAKE,oBAAsBJ,EAAa,eACxCE,KAAKG,cAAgBL,EAAa,WAClCE,KAAKI,qBAAuBN,EAAa,8BAEzCO,IAAMC,aAAaC,QAAQC,KACzB,SAACC,GAEC,OAAOA,KAET,SAACC,GAEC,OAAOC,QAAQC,OAAOF,MAI1BL,IAAMC,aAAaO,SAASL,KAC1B,SAACM,GAAD,OAASA,KACT,SAACC,GACC,MAAMA,K,8CAKZ,SAAWC,EAAOC,GAChB,IAAIC,EAAaF,GAAK,iBAAcA,IAAYhB,KAAKmB,eACjDC,EAAa,CACfC,QAAS,CACP,eAAgB,mCAYpB,OARIH,IACFE,EAAWC,QAAX,cAAsCH,GAGpCD,IACFG,EAAWC,QAAX,OAA+BJ,GAG1BG,I,uBAGT,SAAUE,GACR,OAAOjB,IAAMkB,KACXvB,KAAKC,UACLqB,EACAtB,KAAKwB,gB,2BAIT,WACE,IAAMC,EAAG,UAAMzB,KAAKE,qBACpB,OAAOG,IAAMqB,IACXD,EACAzB,KAAKwB,gB,iCAIT,SAAoBG,EAASX,GAC3B,IAAMS,EAAG,UAAMzB,KAAKG,cAAX,sDAAsEwB,EAAtE,cACT,OAAOtB,IAAMqB,IACXD,EACAzB,KAAKwB,WAAWR,M,gCAIpB,SAAmBY,EAAWZ,EAAOC,GACnC,IAAMQ,EAAMzB,KAAKI,qBAAqByB,QAAQ,eAAgBD,GAC9D,OAAOvB,IAAMqB,IACXD,EACAzB,KAAKwB,WAAWR,EAAOC,M,0BAI3B,WACE,MAAM,UAAN,OAAiBa,aAAaC,QAAQ,mB,kCAGxC,WACE,OAAO1B,IAAMqB,IAAI1B,KAAKgC,2BAA4BhC,KAAKwB,gB,+BAGzD,SAAkBF,EAAMW,GACtB,OAAO5B,IAAM6B,IACXlC,KAAKmC,oBAAoBN,QAAQ,YAAaI,GAC9CX,EACAtB,KAAKwB,kB,YCrEIY,MArBf,SAAwBC,GACtB,OACE,sBAAKC,UAAU,qBAAqBC,QAAS,kBAAMF,EAAMG,uBAAuBH,EAAMI,eAAtF,WACIJ,EAAMI,cACN,qBACEH,UAAU,aACVI,wBAAyB,CAACC,OAAQN,EAAMO,cAAcC,aAAaC,WAKvE,sBAAMR,UAAU,WAAhB,SACGD,EAAMI,aACL,qBAAKM,IAAI,gCAAgCC,MAAM,OAE/C,qBAAKD,IAAI,iCAAiCC,MAAM,a,QC+E3CC,MA7Ff,SAAiBZ,GACf,IAAMa,EAAeb,EAAMc,cAAgBd,EAAMc,aAAaC,QAAUf,EAAMc,aAAad,EAAMc,aAAaC,OAAS,IAAO,KAE9H,OADAC,QAAQC,IAAIjB,GAEV,eAAC,IAAMkB,SAAP,WACE,qBAAKjB,UAAU,YAAYkB,IAAKnB,EAAMoB,YAAtC,SAEEpB,EAAMc,cAAgBd,EAAMc,aAAaO,KAAI,SAACC,EAAKC,GACjD,OACE,sBACAtB,UAAS,mBAAcqB,EAAIE,QAAU,QAAU,GAAtC,YAA4CF,EAAIG,SAAW,aAAc,IADlF,UAKGH,EAAII,QAAUJ,EAAII,OAAOC,MAAQL,EAAIE,SAAWF,EAAIM,MAAQ/E,EAAUQ,UAAUG,aAC/E,sBAAMyC,UAAU,aAAhB,SACE,qBAAKS,IAAKY,EAAII,OAAOC,QAKxBL,EAAIM,MAAQN,EAAIM,MAAQ/E,EAAUQ,UAAUC,MAC3C,qBACA2C,UAAS,mBAAcqB,EAAIO,mBAAqB,cAAgB,IAChExB,wBAAyB,CAACC,OAAQgB,EAAIQ,QAMvCR,EAAIE,SAAWF,EAAIE,QAAQO,OAAOhB,QACjCO,EAAIE,QAAQO,OAAOV,KAAI,SAACW,EAASC,GAC/B,OACE,qBAEAhC,UAAU,WACVC,QAAS,kBAAMF,EAAMkC,cAAcF,IACnC3B,wBAAyB,CAACC,OAAQ0B,IAJlC,uBACqBC,OAW1BX,EAAIM,MAAQN,EAAIM,MAAQ/E,EAAUQ,UAAUE,UAEzC,cAAC,IAAM2D,SAAP,UACE,sBAAKjB,UAAU,wBAAf,UACE,qBACAA,UAAU,GACVI,wBAAyB,CAACC,OAAQgB,EAAIa,SAAS1B,WAG/C,qBAAKR,UAAU,mBAAf,SACGpD,EAAUK,gBAAgBmE,KAAI,SAACe,EAAIC,GAClC,OACE,sBAEApC,UAAU,gBACVC,QAAS,kBAAMF,EAAMkC,cAAcG,EAAc,IAHjD,SAKE,qBAAKC,GAAG,iCAAiC5B,IAAG,yBAAoB0B,EAAGjF,aAAeoF,IAAKH,EAAGhF,WAJvF,QAAUiF,eAjD/B,kBAEgBd,SAmEvBV,GAAeA,EAAYe,MAAQ/E,EAAUQ,UAAUG,aACtD,qBAAKyC,UAAU,qBAAf,SACE,0BACAkB,IAAKnB,EAAMwC,aACXC,KAAK,UACLC,YAAY,kBACZC,KAAK,IACLL,GAAG,gBACHM,UAAW,SAACC,GAAD,OAAO7C,EAAM8C,eAAeD,YCtEhCE,MAhBf,SAAyB/C,GACvB,OACE,sBAAKC,UAAS,sBAAiBD,EAAMI,aAAe,OAAS,QAA7D,UACE,sBAAKH,UAAU,aAAf,UACE,sBAAMA,UAAU,WAAhB,SACE,qBAAKS,IAAI,mCAEX,sBAAMT,UAAU,WAAhB,2BAGF,cAAC,EAAD,eACKD,Q,MCyOIgD,MAhPf,WACE,MAA8CC,oBAAS,GAAvD,mBAAO7C,EAAP,KAAqBD,EAArB,KACA,EAA6C8C,mBAAS,MAAtD,mBAAO1C,EAAP,KAAsB2C,EAAtB,KACA,EAAsCD,mBAAS,MAA/C,mBAAOE,EAAP,KAAoBC,EAApB,KACA,EAAoCH,mBAAS,MAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACA,EAAwCL,mBAAS,IAAjD,mBAAOnC,EAAP,KAAqByC,EAArB,KACA,EAAkCN,mBAAS,MAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACMjB,EAAekB,iBAAO,IACtBtC,EAAcsC,iBAAO,MACrBC,EAAY,IAAIjG,EATH,4CAYnB,kCAAAkG,EAAA,+EAE6BD,EAAUE,gBAFvC,WAEUC,EAFV,SAGwBA,EAAW7E,MAAS6E,EAAW7E,KAAK8E,SAAYD,EAAW7E,KAAK8E,QAAQV,WAHhG,iEAMUC,EAAcQ,EAAW7E,KAAK8E,QAAQV,YANhD,wBAQ2CM,EAAUK,oBAAoBnH,EAAUI,iBAAkB6G,EAAW7E,KAAK8E,QAAQV,YAR7H,YAQUY,EARV,SASsCA,EAAyBhF,KAT/D,0DAYUiF,EAAYD,EAAyBhF,KAZ/C,UAaUiE,EAAoBgB,GAb9B,yBAekCP,EAAUQ,mBAAmBD,EAAU3E,UAAWuE,EAAW7E,KAAK8E,QAAQV,WAAYa,EAAUE,KAAK9B,IAfvI,YAeU+B,EAfV,SAgB6BA,EAAgBpF,KAhB7C,oEAmBUmE,EAAeiB,EAAgBpF,MAnBzC,0DAqBI+B,QAAQ3C,MAAR,MArBJ,2DAZmB,sBA6FnB,SAAS6D,EAAcoC,GACrB,IA0DkBhD,EA1DZiD,EAAchE,EAAchB,UAC5BX,EAAS2B,EAAc6D,KAAK9B,GAC5B/C,EAAYgB,EAAciE,oBAC1BC,EAAU3D,EAAaA,EAAaC,OAAS,GAE/C2D,EAAa,CACfH,YAAaA,EACb9D,QAAS,CACPkE,qBAAsBF,GAAWA,EAAQG,kBAE3CC,SAAUjG,GAGR0F,GAAcG,GAAWA,EAAQjD,SACnCkD,EAAWjE,QAAQgE,EAAO,QAAP,KAA6B,CAACH,GACjDQ,EAAe,CACblD,KAAM/E,EAAUQ,UAAUC,KAC1BwE,KAAMwC,EACN7C,UAAU,KAEH6C,GAAcG,GAAWA,EAAQ7C,MAAQ/E,EAAUQ,UAAUG,aACtEkH,EAAWjE,QAAQgE,EAAQM,WAAWC,KAAOV,EAqC7BhD,EApCL,CACTM,KAAM/E,EAAUQ,UAAUC,KAC1BwE,KAAMwC,EACN7C,UAAU,GAkCd8B,GAAgB,SAAC0B,GACf,MAAM,GAAN,mBAAWA,GAAX,CAA4B3D,QAjCnBgD,GAAcG,GAAWA,EAAQ7C,MAAQ/E,EAAUQ,UAAUE,WACtEmH,EAAWjE,QAAQgE,EAAQtC,SAAS6C,KAAO,CACzCE,WAAW,EACXC,MAAOb,GAETQ,EAAe,CACblD,KAAM/E,EAAUQ,UAAUC,KAC1BwE,KAAK,wCAAD,OACyBjF,EAAUK,gBAAgBoH,EAAa,GAAGnH,YADnE,2BAEAN,EAAUD,gBAAgB0H,GAF1B,cAIJzC,oBAAoB,EACpBJ,UAAU,KAIV+B,GACFA,EAAU4B,QAAQ7F,GAAW8F,QAAQ,wBAAyBX,GAKlE,SAASI,EAAexD,GACtBiC,GAAgB,SAAC0B,GACf,IAAMK,EAAI,YAAOL,GAEjB,OADAK,EAAKC,MACC,GAAN,mBAAWD,GAAX,CAAiBhE,OAYrB,SAASkE,EAAYF,EAAMV,EAAkBlD,GAC3C,IAAK,IAAIH,EAAI,EAAGA,EAAI+D,EAAKvE,OAAQQ,IAC/B+D,EAAK/D,GAAL,iBAA8BqD,EAC9BU,EAAK/D,GAAL,OAAoBG,EAGtB6B,GAAgB,SAAC0B,GACf,MAAM,GAAN,mBAAWA,GAAX,YAA+BK,OAGjCG,YAAW,WACLrE,GAAeA,EAAYsE,UAC7BtE,EAAYsE,QAAQC,UAAYvE,EAAYsE,QAAQE,gBAErD,IA6BL,SAASC,IAAwB,IAAD,EAC9B3D,EAAa,UAACM,EAAakD,eAAd,aAAC,EAAsBP,OAWtC,OArCAW,qBAAU,WACR,GAAKvF,GAAkB8C,GAKvB,GAAI9C,GAAiB8C,GAAcF,EAAa,CAC9C,IAAM4C,EAlJV,WACE,IAGMnH,EAAS2B,EAAc6D,KAAK9B,GAYlC,OAVa,IAAI0D,OAAOC,OAJH,uBAIwB,CAC3CC,QAJqB,MAKrBC,aAAcC,2EAAkExH,EAChFyH,KAAM,CACJrH,QAAS,CACPsH,cAAe,UAAYjD,MAuIhBkD,GAGf,OAFA9C,EAAasC,QA/HjB,SAA0BA,GACxB,IAAMxG,EAAYgB,EAAciE,oBAC1BD,EAAchE,EAAchB,UAC5BX,EAAS2B,EAAc6D,KAAK9B,GAE5B8C,EAAUW,EAAOS,UAAUjH,GACjC6F,EAAQqB,KAAK,kBAAkB,SAACxH,GAC9B+B,QAAQC,IAAI,uBAAwBhC,GACpCuG,EAAYvG,EAAKyH,SAAUzH,EAAK2F,iBAAkB3F,EAAKyC,WAGzD0D,EAAQqB,KAAK,yBAAyB,SAACxH,GACrC+B,QAAQC,IAAI,8BAA+BhC,MAG7CmG,EAAQqB,KAAK,iCAAiC,SAASxH,GACrD+B,QAAQC,IAAI,sCAAuChC,GAEnDuG,EAAYrC,EAAYuD,SAAUzH,EAAK2F,iBAAkBzB,EAAYzB,QAErE,IAAMgD,EAAa,CACjBH,YAAaA,EACb9D,QAAS,CAACkE,qBAAsBxB,EAAYyB,kBAC5CC,SAAUjG,GAGZmH,EAAOX,QAAQ7F,GAAW8F,QAAQ,wBAAyBX,MAG7DU,EAAQqB,KAAK,6BAA6B,SAASE,GACjD3F,QAAQC,IAAI,kCAAmC0F,MAkG/CC,CAAiBb,SA1LF,mCAmLfc,KAUD,CAACtG,EAAe8C,EAAYF,IAG/B2C,qBAAU,WACR,GAAGhF,EAAaC,OAAS,EAAG,CAC1B,IAAM0D,EAAU3D,EAAaA,EAAaC,OAAS,GAC9C0D,EAAQjD,SAAWiD,EAAQ7C,MAAQ/E,EAAUQ,UAAUG,aAAeiH,EAAQ7C,MAAQ/E,EAAUQ,UAAUE,UAC7G2E,OAGH,CAACpB,IAgBF,cAAC,IAAMI,SAAP,UACGX,GACC,eAAC,IAAMW,SAAP,WACE,cAAC,EAAD,CACAX,cAAeA,EACfH,aAAcA,EACdD,sBAAuBA,IAGvB,cAAC,EAAD,CACAC,aAAcA,EACdgB,YAAaA,EACbN,aAAcA,EACd0B,aAAcA,EACdM,eAtBR,SAAwBD,GACR,UAAVA,EAAEmC,MACJnC,EAAEiE,iBACFjB,MAoBIA,qBAAsBA,EACtB3D,cAAeA,U,MCnMV6E,MApCf,WACE,MAAkC9D,mBAASxD,aAAaC,QAAQ,iBAAhE,mBAAOsH,EAAP,KAAkBC,EAAlB,KAqBA,OANAnB,qBAAU,WACHkB,IAba,IAAItJ,GACZwJ,UAAU,CAClBC,MAAOtK,EAAUC,iBAAiBC,MAClCqK,SAAUvK,EAAUC,iBAAiBE,WACpCqK,MAAK,SAAA5I,GACFA,EAAIQ,KAAKN,QACXsI,EAAaxI,EAAIQ,KAAKN,OACtBc,aAAa6H,QAAQ,eAAgB7I,EAAIQ,KAAKN,cAYlD,sBAAKsB,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,oBAAIA,UAAU,cAAd,oCAID+G,GACC,cAAC,EAAD,QC1BOO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBJ,MAAK,YAAkD,IAA/CK,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.bebec82d.chunk.js","sourcesContent":["const MSG_TYPES = {\n    TEXT: \"text\",\n    FEEDBACK: \"feedback\",\n    PLAIN_INPUT: \"plainInput\"\n}\n\nconst FEEDBACK_VALUES = {\n    1: 'Disappointing',\n    2: 'Bad',\n    3: 'Just Ok',\n    4: 'Good',\n    5: 'Excellent'\n}\n  \nconst FEEDBACK_EMOJIS = [\n{\n    imgFileName: 'disappointingEmoji.svg',\n    altName: FEEDBACK_VALUES[1]\n},\n{\n    imgFileName: 'badEmoji.svg',\n    altName: FEEDBACK_VALUES[2]\n},\n{\n    imgFileName: 'justokEmoji.svg',\n    altName: FEEDBACK_VALUES[3]\n}, {\n    imgFileName: 'goodEmoji.svg',\n    altName: FEEDBACK_VALUES[4]\n},\n{\n    imgFileName: 'excellentEmoji.svg',\n    altName: FEEDBACK_VALUES[5]\n}\n];\n\nexport const CONSTANTS = {\n    USER_CREDENTIALS: {\n        EMAIL: \"vishnupriyan.inba@gmail.com\",\n        PASSWORD: \"Testzoominfo@1\"\n    },\n    DEFAULT_CONVO_ID: \"clZoOcE1635055310486\",\n    FEEDBACK_EMOJIS,\n    MSG_TYPES,\n    FEEDBACK_VALUES\n}","import axios from \"axios\";\n\nconst API_DOMAIN = \"https://insentrecruit.api.insent.ai\";\n\nclass AxiosService {\n  constructor() {\n    this.LOGIN_URL = API_DOMAIN + \"/app/login\";\n    this.GET_APP_DETAILS_URL = API_DOMAIN + \"/app/details\";\n    this.GET_CONVO_URL = API_DOMAIN + \"/getuser\";\n    this.GET_INIT_MESSAGE_URL = API_DOMAIN + \"/user/channels/{channel_id}\";\n\n    axios.interceptors.request.use(\n      (config) => {\n        // Do something before request is sent\n        return config;\n      },\n      (error) => {\n        // Do something with request error\n        return Promise.reject(error);\n      }\n    );\n\n    axios.interceptors.response.use(\n      (res) => res,\n      (x) => {\n        throw x;\n      }\n    );\n  }\n\n  getHeaders(token, userId) {\n    let authToken = (token && `Bearer ${token}`) || this.getAuthToken();\n    let reqHeaders = {\n      headers: {\n        \"Content-Type\": \"application/json;charset=UTF-8\"\n      },\n    };\n\n    if (authToken) {\n      reqHeaders.headers[\"Authorization\"] = authToken;\n    }\n\n    if (userId) {\n      reqHeaders.headers[\"userid\"] = userId;\n    }\n\n    return reqHeaders;\n  }\n\n  loginUser(data) {\n    return axios.post(\n      this.LOGIN_URL,\n      data,\n      this.getHeaders()\n    );\n  }\n\n  getAppDetails() {\n    const url = `${this.GET_APP_DETAILS_URL}`\n    return axios.get(\n      url,\n      this.getHeaders()\n    );\n  }\n\n  getConversationInfo(convoId, token) {\n    const url = `${this.GET_CONVO_URL}?url=insentrecruit.insent.ai/conversations/${convoId}/simulator`\n    return axios.get(\n      url,\n      this.getHeaders(token)\n    );\n  }\n\n  getInitMessageInfo(channelId, token, userId) {\n    const url = this.GET_INIT_MESSAGE_URL.replace(\"{channel_id}\", channelId)\n    return axios.get(\n      url,\n      this.getHeaders(token, userId)\n    );\n  }\n\n  getAuthToken() {\n    return `Bearer ${localStorage.getItem('insent-token')}`;\n  }\n\n  getRecommendedTutors() {\n    return axios.get(this.GET_RECOMMENDED_TUTORS_URL, this.getHeaders());\n  }\n\n  updateTopicStatus(data, topicId) {\n    return axios.put(\n      this.UPDATE_TOPIC_STATUS.replace(\"{topicId}\", topicId),\n      data,\n      this.getHeaders()\n    );\n  }\n}\n\nexport { AxiosService };\n","import React from 'react';\n\n// Render the icon area with greeting msg.\nfunction WidgetIconArea(props) {\n  return (\n    <div className=\"bot-widget-wrapper\" onClick={() => props.toggleWidgetOpenState(!props.isWidgetOpen)}>\n      {!props.isWidgetOpen &&\n        <div \n          className=\"convo-part\" \n          dangerouslySetInnerHTML={{__html: props.initConvoInfo.popupMessage.message}}\n        >\n        </div>\n      }\n\n      <span className=\"bot-icon\">\n        {props.isWidgetOpen ? \n          <img src=\"/assets/images/close-icon.png\" width=\"40\"/>\n          :\n          <img src=\"/assets/images/bot-icon-2.jpeg\" width=\"72\" />\n        }\n      </span>\n    </div>\n    ) \n}\nexport default WidgetIconArea;\n","import React from 'react';\nimport { CONSTANTS } from '../constants';\n\n// Render the chat box with messages & user responses. \nfunction ChatBox(props) {\n  const lastChatMsg = (props.chatMessages && props.chatMessages.length && props.chatMessages[props.chatMessages.length - 1]) || null;\n  console.log(props)\n  return (\n    <React.Fragment>\n      <div className=\"chat-area\" ref={props.chatAreaRef}>\n      {\n        props.chatMessages && props.chatMessages.map((msg, i) => {\n          return (\n            <div \n            className={`chat-msg ${msg.buttons ? \"block\" : \"\"} ${msg.sentByMe ? 'sent-by-me': ''}`}\n            key={`msg-key-${i}`} \n            >\n              {/* Sender Image render */}\n              {msg.sender && msg.sender.img && !msg.buttons && msg.type != CONSTANTS.MSG_TYPES.PLAIN_INPUT &&\n                <span className=\"msg-sender\">\n                  <img src={msg.sender.img} />\n                </span>\n              }\n              \n              {/* Text message render */}\n              {msg.type && msg.type == CONSTANTS.MSG_TYPES.TEXT &&\n                <div \n                className={`chat-txt ${msg.isFeedbackResponse ? 'fb-response' : ''}`}\n                dangerouslySetInnerHTML={{__html: msg.text}}\n                >\n                </div>\n              }\n\n              {/* Buttons message render */}\n              {msg.buttons && msg.buttons.fields.length &&\n                msg.buttons.fields.map((btnName, bkey) => {\n                  return (\n                    <div \n                    key={`chat-btn-key-${bkey}`} \n                    className=\"btn-name\"\n                    onClick={() => props.sendServerMsg(btnName)}\n                    dangerouslySetInnerHTML={{__html: btnName}}\n                    >\n                    </div>\n                  )\n                })\n              }\n\n              {/* Feedback question render */}\n              {msg.type && msg.type == CONSTANTS.MSG_TYPES.FEEDBACK &&\n                (\n                  <React.Fragment>\n                    <div className=\"feedback-msg chat-txt\">\n                      <div \n                      className=\"\"\n                      dangerouslySetInnerHTML={{__html: msg.feedback.message}}\n                      >\n                      </div>\n                      <div className=\"feedback-wrapper\">\n                        {CONSTANTS.FEEDBACK_EMOJIS.map((fd, feedBackVal) => {\n                          return (\n                            <span \n                            key={\"emoji\" + feedBackVal}\n                            className=\"emoji-wrapper\" \n                            onClick={() => props.sendServerMsg(feedBackVal + 1)}\n                            >\n                              <img id=\"insent-rating-card-rating-icon\" src={`/assets/images/${fd.imgFileName}`} alt={fd.altName}/>\n                            </span>\n                          )\n                        })}\n                      </div>\n                    </div>\n                  </React.Fragment>\n                )\n              }\n            </div>\n          )\n        })\n      }\n    </div>\n\n    {/* Chat input text area render */}\n    {lastChatMsg && lastChatMsg.type == CONSTANTS.MSG_TYPES.PLAIN_INPUT &&\n      <div className=\"chat-input-wrapper\">\n        <textarea \n        ref={props.textInputRef}\n        name=\"message\" \n        placeholder=\"Type your reply\" \n        rows=\"1\" \n        id=\"textInputArea\"\n        onKeyDown={(e) => props.submitTextarea(e)}\n        ></textarea>\n      </div>\n    }\n  </React.Fragment>\n  )\n}\nexport default ChatBox;\n","import React from 'react';\nimport Chatbox from './chat-box';\n\n// Render the conversation area when widget is opened.\nfunction WidgetConvoArea(props) {\n  return (\n    <div className={`widget-area ${props.isWidgetOpen ? 'show' : 'hide'}`}>\n      <div className=\"bot-header\">\n        <span className=\"bot-icon\">\n          <img src=\"/assets/images/bot-icon.jpeg\" />\n        </span>\n        <span className=\"bot-name\">Insent Bot</span>\n      </div>\n\n      <Chatbox\n       {...props}\n      />\n   </div>\n  )\n}\nexport default WidgetConvoArea;\n","import React, { useEffect, useState, useRef } from 'react';\nimport { CONSTANTS } from '../constants';\nimport { AxiosService } from '../services/AxiosService';\nimport WidgetIconArea from './widget-icon-area';\nimport WidgetConvoArea from './widget-convo-area';\nimport './bot-widget.scss';\n\n// Initial component to render the widget\nfunction BotWidget() {\n  const [isWidgetOpen, toggleWidgetOpenState] = useState(false);\n  const [initConvoInfo, setInitialConvoInfo] = useState(null);\n  const [initMsgInfo, setInitMsgInfo] = useState(null);\n  const [projectKey, setProjectKey] = useState(null);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [pusherObj, setPusherObj] = useState(null);\n  const textInputRef = useRef('');\n  const chatAreaRef = useRef(null);\n  const axiosServ = new AxiosService();\n\n  // Get initial convo details and app details to start with.\n  async function getInitConversationInfo() {\n    try {\n      const appDetails = await axiosServ.getAppDetails();\n      if (!appDetails || !appDetails.data || !appDetails.data.project || !appDetails.data.project.projectKey) {\n        return;\n      }\n      await setProjectKey(appDetails.data.project.projectKey);\n\n      const conversationInfoResponse = await axiosServ.getConversationInfo(CONSTANTS.DEFAULT_CONVO_ID, appDetails.data.project.projectKey);\n      if (!conversationInfoResponse || !conversationInfoResponse.data) {\n        return;\n      } \n      const convoInfo = conversationInfoResponse.data;\n      await setInitialConvoInfo(convoInfo);\n\n      const msgInfoResponse = await axiosServ.getInitMessageInfo(convoInfo.channelId, appDetails.data.project.projectKey, convoInfo.user.id);\n      if (!msgInfoResponse || !msgInfoResponse.data) {\n        return;\n      } \n      await setInitMsgInfo(msgInfoResponse.data);\n    } catch(err) {\n      console.error(err)\n    }\n  }\n\n  // Initialize Pusher with the pusher token & cluster\n  function initPusher() {\n    const AUTH_ENDPOINT_BASE_URL = 'https://insentrecruit.api.insent.ai/'\n    const PUSHER_TOKEN = '67bb469433cb732caa7a'\n    const PUSHER_CLUSTER = 'mt1'\n    const userId = initConvoInfo.user.id\n\n    var pusher = new window.Pusher(PUSHER_TOKEN, {\n      cluster: PUSHER_CLUSTER,\n      authEndpoint: AUTH_ENDPOINT_BASE_URL + 'pusher/presence/auth/visitor?userid=' + userId,\n      auth: {\n        headers: {\n          Authorization: 'Bearer ' + projectKey,\n        },\n      },\n    });\n\n    return pusher;\n  }\n\n  // Bind pusher client/server msg events & its callbacks\n  function bindPusherEvents(pusher) {\n    const channelId = initConvoInfo.subscriptionChannel\n    const channelName = initConvoInfo.channelId\n    const userId = initConvoInfo.user.id\n\n    const channel = pusher.subscribe(channelId);\n    channel.bind(\"server-message\", (data) => {\n      console.log(\"[server-message] :: \", data)\n      addMessages(data.messages, data.messageTimestamp, data.sender)  // Add to chat\n    });\n\n    channel.bind('client-widget-message', (data) => {\n      console.log(\"[client-widget-message] :: \", data)\n    });\n\n    channel.bind('pusher:subscription_succeeded', function(data) {\n      console.log(\"[pusher:subscription_succeeded] :: \", data);\n\n      addMessages(initMsgInfo.messages, data.messageTimestamp, initMsgInfo.sender); // Add initial message to chat\n\n      const clientData = {\n        channelName: channelName,\n        message: {lastMessageTimeStamp: initMsgInfo.messageTimestamp},\n        senderId: userId\n      }\n\n      pusher.channel(channelId).trigger('client-widget-message', clientData); // Send data to server\n    });\n\n    channel.bind('pusher:subscription_error', function(status) {\n      console.log(\"[pusher:subscription_error] :: \", status)\n    });\n  }\n\n  // Send data to server (button click/text response/feedback response)\n  function sendServerMsg(fieldValue) {\n    const channelName = initConvoInfo.channelId\n    const userId = initConvoInfo.user.id\n    const channelId = initConvoInfo.subscriptionChannel\n    const lastMsg = chatMessages[chatMessages.length - 1];\n\n    let clientData = {\n      channelName: channelName,\n      message: {\n        lastMessageTimeStamp: lastMsg && lastMsg.messageTimestamp\n      },\n      senderId: userId\n    }\n\n    if (fieldValue && lastMsg && lastMsg.buttons) { // Button reply\n      clientData.message[lastMsg['buttons']['key']] = [fieldValue];\n      replaceLastMsg({\n        type: CONSTANTS.MSG_TYPES.TEXT,\n        text: fieldValue,\n        sentByMe: true\n      })\n    } else if (fieldValue && lastMsg && lastMsg.type == CONSTANTS.MSG_TYPES.PLAIN_INPUT) {   // Plain text input reply\n      clientData.message[lastMsg.plainInput.key] = fieldValue\n      addLastMsg({\n        type: CONSTANTS.MSG_TYPES.TEXT,\n        text: fieldValue,\n        sentByMe: true\n      })\n    } else if (fieldValue && lastMsg && lastMsg.type == CONSTANTS.MSG_TYPES.FEEDBACK) { // Feedback reply\n      clientData.message[lastMsg.feedback.key] = {\n        submitted: true,\n        value: fieldValue\n      }\n      replaceLastMsg({\n        type: CONSTANTS.MSG_TYPES.TEXT,\n        text: `\n          <img src=\"/assets/images/${CONSTANTS.FEEDBACK_EMOJIS[fieldValue - 1].imgFileName}\"/> \n          ${CONSTANTS.FEEDBACK_VALUES[fieldValue]}\n        `,\n        isFeedbackResponse: true,\n        sentByMe: true\n      })\n    }\n\n    if (pusherObj) {\n      pusherObj.channel(channelId).trigger('client-widget-message', clientData);\n    }\n  }\n\n  // Replace the last message with new msg\n  function replaceLastMsg(msg) {\n    setChatMessages((oldChatMessages) => {\n      const msgs = [...oldChatMessages];\n      msgs.pop();\n      return [...msgs, msg]\n    });\n  }\n\n  // Add a new msg\n  function addLastMsg(msg) {\n    setChatMessages((oldChatMessages) => {\n      return [...oldChatMessages, msg]\n    });\n  }\n  \n  // Add message & auto scroll the widget chat area\n  function addMessages(msgs, messageTimestamp, sender) {\n    for (let i = 0; i < msgs.length; i++) {\n      msgs[i]['messageTimestamp'] = messageTimestamp\n      msgs[i]['sender'] = sender\n    }\n\n    setChatMessages((oldChatMessages) => {\n      return [...oldChatMessages, ...msgs]\n    });\n\n    setTimeout(() => {\n      if (chatAreaRef && chatAreaRef.current) {\n        chatAreaRef.current.scrollTop = chatAreaRef.current.scrollHeight;\n      }\n    }, 10);\n  }\n\n  // Watch for initial data side-effects and initialize the pusher.\n  useEffect(() => {\n    if (!initConvoInfo && !projectKey) {\n      getInitConversationInfo();\n      return;\n    }\n\n    if (initConvoInfo && projectKey && initMsgInfo) {\n      const pusher = initPusher();\n      setPusherObj(pusher);\n      bindPusherEvents(pusher);\n      return;\n    }\n  }, [initConvoInfo, projectKey, initMsgInfo])\n\n  // Watch for chatMessages changes & invoke server msg call\n  useEffect(() => {\n    if(chatMessages.length > 1) {\n      const lastMsg = chatMessages[chatMessages.length - 1]\n      if (!lastMsg.buttons && lastMsg.type != CONSTANTS.MSG_TYPES.PLAIN_INPUT && lastMsg.type != CONSTANTS.MSG_TYPES.FEEDBACK) {\n        sendServerMsg()\n      }\n    }    \n  }, [chatMessages])\n\n  // Input text area change handler\n  function handleChatAreaChange() {\n    sendServerMsg(textInputRef.current?.value)\n  }\n\n  // Enter key check for text input\n  function submitTextarea(e) {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      handleChatAreaChange();\n    }\n  }\n\n  return (\n    <React.Fragment>\n      {initConvoInfo && \n        <React.Fragment>\n          <WidgetIconArea\n          initConvoInfo={initConvoInfo}\n          isWidgetOpen={isWidgetOpen}\n          toggleWidgetOpenState={toggleWidgetOpenState}\n          />\n\n          <WidgetConvoArea\n          isWidgetOpen={isWidgetOpen}\n          chatAreaRef={chatAreaRef}\n          chatMessages={chatMessages}\n          textInputRef={textInputRef}\n          submitTextarea={submitTextarea}\n          handleChatAreaChange={handleChatAreaChange}\n          sendServerMsg={sendServerMsg}\n          />\n          \n        </React.Fragment>\n      }\n    </React.Fragment>\n  );\n}\n\nexport default BotWidget;\n","// import logo from './logo.svg';\nimport BotWidget from './components/bot-widget';\nimport './App.scss';\nimport { useEffect, useState } from 'react';\nimport { AxiosService } from './services/AxiosService';\nimport { CONSTANTS } from './constants';\n\n// Bootstrapping APP component to login and set the user token.\nfunction App() {\n  const [userToken, setUserToken] = useState(localStorage.getItem('insent-token'));\n\n  function loginUser() {\n    const axiosServ = new AxiosService();\n    axiosServ.loginUser({\n      email: CONSTANTS.USER_CREDENTIALS.EMAIL,\n      password: CONSTANTS.USER_CREDENTIALS.PASSWORD\n    }).then(res => {\n      if (res.data.token) {\n        setUserToken(res.data.token);\n        localStorage.setItem('insent-token', res.data.token)\n      }\n    });\n  }\n\n  useEffect(() => {\n    if (!userToken) {\n      loginUser();\n    }\n  });\n\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <h1 className=\"text-center\">\n          Custom Insent.ai Bot\n        </h1>\n      </header>\n      {userToken && \n        <BotWidget />\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}